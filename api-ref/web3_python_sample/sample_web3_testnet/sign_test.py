import json
from web3 import Web3, HTTPProvider
from web3.contract import ConciseContract

def sign_up(payload):


    infura_url = "https://ropsten.infura.io/v3/a9f0b3832f2d4011b2812c2233ccf60e"

    web3 = Web3(Web3.HTTPProvider(infura_url))
    #print(web3.isConnected())

    contract_address = Web3.toChecksumAddress("0xa28858B5C7d3F4EB54155CEa4E50451e7184F897")
    private_key = "5c6f39688f05e6880754d8995ed56a0145654bc7d7c599b7566a051fb89c1b3c"
    account = web3.eth.account.privateKeyToAccount(private_key)
    account_address= account.address
    #print(account_address)

    abi = json.loads('[{"constant":true,"inputs":[],"name":"peopleCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_email","type":"string"},{"name":"_signature","type":"string"}],"name":"addInformation","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"infoList","outputs":[{"name":"name","type":"string"},{"name":"email","type":"string"},{"name":"signature","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]')
    bytecode = "6080604052600060015534801561001557600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106da806100656000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063267c68e014610067578063373e1180146100925780638da5cb5b14610187578063fb74ad85146101de575b600080fd5b34801561007357600080fd5b5061007c61035c565b6040518082815260200191505060405180910390f35b34801561009e57600080fd5b50610185600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610362565b005b34801561019357600080fd5b5061019c6103f2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ea57600080fd5b5061020960048036038101908080359060200190929190505050610417565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610251578082015181840152602081019050610236565b50505050905090810190601f16801561027e5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156102b757808201518184015260208101905061029c565b50505050905090810190601f1680156102e45780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561031d578082015181840152602081019050610302565b50505050905090810190601f16801561034a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b60015481565b6060604051908101604052808481526020018381526020018281525060026000600154815260200190815260200160002060008201518160000190805190602001906103af929190610609565b5060208201518160010190805190602001906103cc929190610609565b5060408201518160020190805190602001906103e9929190610609565b50905050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c35780601f10610498576101008083540402835291602001916104c3565b820191906000526020600020905b8154815290600101906020018083116104a657829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105615780601f1061053657610100808354040283529160200191610561565b820191906000526020600020905b81548152906001019060200180831161054457829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b5050505050905083565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061064a57805160ff1916838001178555610678565b82800160010185558215610678579182015b8281111561067757825182559160200191906001019061065c565b5b5090506106859190610689565b5090565b6106ab91905b808211156106a757600081600090555060010161068f565b5090565b905600"

    #deploy contract
    MyContract = web3.eth.contract(abi=abi, bytecode=bytecode)
    #contract instance
    MyContract_instance = web3.eth.contract(abi=abi, address=contract_address)
    name = payload['name']
    email = payload['email']
    sig = payload['signature']
    try:
        tx = MyContract_instance.functions.addInformation(name, email, sig).buildTransaction(
                {'nonce': web3.eth.getTransactionCount(account_address)}
            )

        #sign transaction
        signed_tx = web3.eth.account.signTransaction(tx, private_key)

        #send transaction
        tx_hash= web3.eth.sendRawTransaction(signed_tx.rawTransaction)
        #print(web3.toHex(tx_hash))
        #transaction_hash: 0xe7e2eeb7a49e1fffceb01256790b2c73d2f603bf1b87deb88eadfcce32df95bbb
        return web3.toHex(tx_hash)
    except Exception:
        return None # in case there is something wrong with adding new signed data